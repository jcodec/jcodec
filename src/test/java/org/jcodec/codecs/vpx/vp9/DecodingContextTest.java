package org.jcodec.codecs.vpx.vp9;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;

import org.jcodec.common.ArrayUtil;
import org.jcodec.common.DemuxerTrack;
import org.jcodec.common.io.FileChannelWrapper;
import org.jcodec.common.io.NIOUtils;
import org.jcodec.common.model.Packet;
import org.jcodec.containers.mkv.demuxer.MKVDemuxer;
import org.junit.Assert;
import org.junit.Test;

public class DecodingContextTest {
	public static final String VP9_PATH = "src/test/resources/out9.webm";

	@Test
	public void testUncompressedHeaderRead() throws IOException {
		FileChannelWrapper ch = null;
		try {
			ch = NIOUtils.readableFileChannel(VP9_PATH);
			MKVDemuxer demuxer = new MKVDemuxer(ch);
			List<DemuxerTrack> videoTracks = demuxer.getVideoTracks();
			DemuxerTrack track = videoTracks.get(0);
			Packet frame = track.nextFrame();

			DecodingContext dc = new DecodingContext();
			ByteBuffer frameData = frame.getData();
			int compressedHeaderLength = dc.readUncompressedHeader(frameData);

			Assert.assertEquals(0, dc.getFrameContextIdx());
			Assert.assertEquals(0, dc.getTileColsLog2());
			Assert.assertEquals(0, dc.getTileRowsLog2());

			Assert.assertEquals(512, dc.getFrameWidth());
			Assert.assertEquals(288, dc.getFrameHeight());

			Assert.assertEquals(44, dc.getFilterLevel());
			Assert.assertEquals(0, dc.getSharpnessLevel());

			Assert.assertEquals(180, dc.getBaseQIdx());
			Assert.assertEquals(0, dc.getDeltaQYDc());
			Assert.assertEquals(0, dc.getDeltaQUvDc());
			Assert.assertEquals(0, dc.getDeltaQUvAc());

			Assert.assertEquals(114, compressedHeaderLength);
		} finally {
			NIOUtils.closeQuietly(ch);
		}
	}

	@Test
	public void testCompressedHeaderReadKeyFrame() throws IOException {
		FileChannelWrapper ch = null;
		try {
			ch = NIOUtils.readableFileChannel(VP9_PATH);
			MKVDemuxer demuxer = new MKVDemuxer(ch);
			List<DemuxerTrack> videoTracks = demuxer.getVideoTracks();
			DemuxerTrack track = videoTracks.get(0);
			Packet frame = track.nextFrame();

			DecodingContext dc = new DecodingContext();
			ByteBuffer frameData = frame.getData();
			NIOUtils.skip(frameData, 18);

			ByteBuffer compressedHeader = NIOUtils.read(frameData, 114);
			byte[] arr = NIOUtils.toArray(compressedHeader);
			Assert.assertEquals(127, arr[0] & 0xff);
			Assert.assertEquals(137, arr[1] & 0xff);
			Assert.assertEquals(225, arr[2] & 0xff);
			dc.readCompressedHeader(compressedHeader);
			Assert.assertEquals(4, dc.getTxMode());
			Assert.assertArrayEquals(new int[] { 100 }, dc.getTx8x8Probs()[0]);
			Assert.assertArrayEquals(new int[] { 36 }, dc.getTx8x8Probs()[1]);
			Assert.assertArrayEquals(new int[] { 20, 152 }, dc.getTx16x16Probs()[0]);
			Assert.assertArrayEquals(new int[] { 15, 58 }, dc.getTx16x16Probs()[1]);
			Assert.assertArrayEquals(new int[] { 3, 136, 37 }, dc.getTx32x32Probs()[0]);
			Assert.assertArrayEquals(new int[] { 5, 9, 13 }, dc.getTx32x32Probs()[1]);

			int[] coeffProbs0 = { 195, 29, 183, 133, 49, 136, 86, 42, 151, 31, 107, 169, 164, 99, 228, 73, 82, 222, 73,
					66, 114, 2, 44, 76, 1, 19, 32, 177, 132, 201, 138, 114, 187, 13, 91, 157, 7, 75, 127, 3, 58, 95, 1,
					28, 47, 69, 142, 221, 255, 122, 201, 15, 91, 159, 6, 67, 121, 1, 42, 77, 1, 17, 31, 102, 148, 228,
					67, 117, 204, 17, 82, 154, 6, 59, 114, 2, 39, 75, 1, 15, 29, 156, 57, 233, 119, 57, 212, 58, 48,
					163, 29, 40, 124, 12, 30, 81, 3, 12, 31, 191, 107, 226, 124, 117, 204, 25, 99, 155, 29, 148, 210,
					37, 126, 194, 8, 93, 157, 2, 68, 118, 1, 39, 69, 1, 17, 33, 41, 151, 213, 27, 123, 193, 3, 82, 144,
					1, 58, 105, 1, 32, 60, 1, 13, 26, 59, 159, 220, 23, 126, 198, 4, 88, 151, 1, 66, 114, 1, 38, 71, 1,
					18, 34, 114, 136, 232, 51, 114, 207, 11, 83, 155, 3, 56, 105, 1, 33, 65, 1, 17, 34, 149, 65, 234,
					121, 57, 215, 61, 49, 166, 28, 36, 114, 12, 25, 76, 3, 16, 42, 214, 6, 220, 175, 63, 188, 112, 65,
					137, 85, 137, 221, 179, 131, 216, 49, 111, 192, 21, 87, 155, 2, 49, 87, 1, 16, 28, 203, 163, 230,
					165, 137, 220, 29, 100, 183, 10, 70, 135, 2, 42, 81, 1, 17, 33, 209, 167, 237, 55, 133, 222, 15, 97,
					179, 4, 72, 135, 1, 45, 85, 1, 19, 38, 124, 146, 240, 66, 124, 224, 17, 88, 175, 4, 58, 122, 1, 36,
					75, 1, 18, 37, 141, 79, 241, 126, 70, 227, 66, 58, 182, 30, 44, 136, 12, 34, 96, 2, 20, 47, 229, 99,
					249, 143, 111, 235, 46, 109, 192, 82, 158, 236, 94, 146, 224, 25, 117, 191, 9, 87, 149, 3, 56, 99,
					1, 33, 57, 83, 167, 237, 68, 145, 222, 10, 103, 177, 2, 72, 131, 1, 41, 79, 1, 20, 39, 99, 167, 239,
					47, 141, 224, 10, 104, 178, 2, 73, 133, 1, 44, 85, 1, 22, 47, 127, 145, 243, 71, 129, 228, 17, 93,
					177, 3, 61, 124, 1, 41, 84, 1, 21, 52, 157, 78, 244, 140, 72, 231, 69, 58, 184, 31, 44, 137, 14, 38,
					105, 8, 23, 61 };
			Assert.assertArrayEquals(coeffProbs0, ArrayUtil.flatten5D(dc.getCoefProbs()[0]));

			int[] coeffProbs1 = { 125, 34, 187, 52, 41, 133, 6, 31, 92, 37, 109, 196, 87, 102, 203, 23, 87, 177, 8, 67,
					101, 1, 41, 99, 1, 19, 29, 73, 154, 228, 47, 127, 218, 34, 96, 145, 2, 73, 114, 1, 51, 164, 1, 28,
					45, 86, 163, 243, 47, 131, 228, 2, 93, 148, 1, 67, 111, 1, 41, 69, 1, 14, 24, 138, 176, 247, 73,
					145, 244, 3, 101, 156, 1, 69, 111, 1, 39, 63, 1, 14, 23, 203, 192, 233, 25, 154, 215, 6, 109, 167,
					3, 78, 118, 1, 48, 69, 1, 21, 29, 202, 105, 245, 108, 106, 216, 18, 90, 144, 33, 172, 219, 64, 149,
					206, 14, 117, 177, 5, 90, 141, 2, 61, 95, 1, 37, 57, 33, 179, 220, 11, 140, 198, 1, 89, 148, 1, 60,
					104, 1, 33, 57, 1, 12, 21, 30, 181, 221, 8, 141, 198, 1, 87, 145, 1, 58, 100, 1, 31, 55, 1, 12, 20,
					32, 186, 224, 7, 142, 198, 1, 86, 143, 1, 58, 100, 1, 31, 55, 1, 12, 22, 57, 192, 227, 20, 143, 204,
					3, 96, 154, 1, 68, 112, 1, 42, 69, 1, 19, 32, 176, 35, 215, 113, 47, 169, 29, 48, 105, 74, 129, 203,
					181, 120, 203, 125, 107, 178, 73, 84, 144, 4, 50, 84, 1, 15, 25, 71, 172, 217, 44, 141, 209, 15,
					102, 173, 6, 76, 133, 2, 51, 89, 1, 24, 42, 64, 185, 231, 31, 148, 216, 8, 103, 175, 3, 74, 131, 1,
					46, 81, 1, 18, 30, 65, 196, 235, 25, 157, 221, 5, 105, 174, 1, 67, 120, 1, 38, 69, 1, 15, 30, 65,
					204, 238, 30, 156, 224, 7, 107, 177, 2, 70, 124, 1, 42, 73, 1, 18, 34, 225, 86, 251, 144, 104, 235,
					42, 99, 181, 85, 175, 239, 112, 165, 229, 29, 136, 200, 12, 103, 162, 6, 77, 123, 2, 53, 84, 75,
					183, 239, 30, 155, 221, 3, 106, 171, 1, 74, 128, 1, 44, 76, 1, 17, 28, 73, 185, 240, 27, 159, 222,
					2, 107, 172, 1, 75, 127, 1, 42, 73, 1, 17, 29, 62, 190, 238, 21, 159, 222, 2, 107, 172, 1, 72, 122,
					1, 40, 71, 1, 18, 32, 61, 199, 240, 27, 161, 226, 4, 113, 180, 1, 76, 129, 1, 46, 80, 1, 23, 41 };

			Assert.assertArrayEquals(coeffProbs1, ArrayUtil.flatten5D(dc.getCoefProbs()[1]));

			int[] coeffProbs2 = { 7, 27, 153, 5, 30, 95, 1, 16, 53, 50, 75, 127, 57, 75, 124, 27, 67, 108, 10, 54, 148,
					1, 33, 101, 1, 12, 73, 43, 125, 151, 26, 108, 148, 7, 83, 122, 2, 59, 89, 1, 38, 60, 1, 17, 27, 23,
					144, 163, 13, 112, 210, 2, 75, 192, 1, 50, 81, 1, 31, 51, 1, 14, 23, 47, 192, 215, 6, 146, 201, 1,
					78, 125, 1, 51, 86, 1, 31, 54, 1, 14, 23, 73, 222, 251, 3, 150, 234, 1, 91, 146, 1, 55, 95, 1, 30,
					53, 1, 11, 20, 19, 55, 240, 19, 59, 196, 3, 52, 105, 41, 166, 207, 104, 153, 199, 31, 123, 181, 14,
					101, 152, 5, 72, 106, 1, 36, 52, 35, 176, 211, 12, 131, 190, 2, 88, 144, 1, 60, 101, 1, 36, 60, 1,
					16, 28, 28, 183, 213, 8, 134, 191, 1, 86, 142, 1, 56, 96, 1, 30, 53, 1, 12, 20, 20, 190, 215, 4,
					135, 192, 1, 84, 139, 1, 53, 91, 1, 28, 49, 1, 11, 20, 13, 196, 216, 2, 137, 192, 1, 86, 143, 1, 57,
					99, 1, 32, 56, 1, 13, 24, 53, 29, 217, 96, 47, 156, 22, 43, 87, 78, 120, 193, 111, 116, 186, 46,
					102, 164, 15, 80, 128, 2, 49, 76, 1, 18, 28, 190, 161, 203, 42, 132, 192, 10, 98, 150, 3, 69, 109,
					1, 44, 70, 1, 18, 29, 229, 186, 211, 30, 140, 196, 4, 93, 146, 1, 62, 102, 1, 38, 65, 1, 16, 27, 47,
					199, 217, 14, 145, 196, 1, 88, 142, 1, 57, 98, 1, 36, 62, 1, 15, 26, 26, 219, 229, 5, 155, 207, 1,
					94, 151, 1, 60, 104, 1, 36, 62, 1, 16, 28, 233, 29, 248, 146, 47, 220, 43, 52, 140, 100, 163, 232,
					179, 161, 222, 63, 142, 204, 37, 113, 174, 26, 89, 137, 18, 68, 97, 85, 181, 230, 32, 146, 209, 7,
					100, 164, 3, 71, 121, 1, 45, 77, 1, 18, 30, 65, 187, 230, 20, 148, 207, 2, 97, 159, 1, 68, 116, 1,
					40, 70, 1, 14, 29, 40, 194, 227, 8, 147, 204, 1, 94, 155, 1, 65, 112, 1, 39, 66, 1, 14, 26, 16, 208,
					228, 3, 151, 207, 1, 98, 160, 1, 67, 117, 1, 41, 74, 1, 17, 31 };

			Assert.assertArrayEquals(coeffProbs2, ArrayUtil.flatten5D(dc.getCoefProbs()[2]));

			int[] coeffProbs3 = { 17, 38, 140, 7, 34, 80, 1, 17, 29, 37, 75, 128, 41, 76, 128, 26, 66, 116, 12, 52, 94,
					2, 32, 55, 1, 10, 16, 50, 127, 154, 37, 109, 152, 16, 82, 121, 5, 59, 85, 1, 35, 54, 1, 13, 20, 40,
					142, 167, 17, 110, 157, 2, 71, 112, 1, 44, 72, 1, 27, 45, 1, 11, 17, 30, 175, 188, 9, 124, 199, 1,
					74, 165, 1, 48, 78, 1, 30, 49, 1, 11, 18, 21, 238, 240, 2, 173, 235, 1, 119, 190, 1, 48, 79, 1, 27,
					45, 1, 11, 17, 36, 41, 235, 29, 36, 193, 10, 27, 111, 85, 165, 222, 177, 162, 215, 110, 135, 195,
					57, 113, 168, 23, 83, 120, 10, 49, 61, 85, 190, 223, 36, 139, 200, 5, 90, 146, 1, 60, 103, 1, 38,
					65, 1, 18, 30, 72, 202, 223, 23, 141, 199, 2, 86, 140, 1, 56, 97, 1, 36, 61, 1, 16, 27, 55, 218,
					225, 13, 145, 200, 1, 86, 141, 1, 57, 99, 1, 35, 61, 1, 13, 22, 15, 235, 212, 1, 132, 184, 1, 84,
					139, 1, 57, 97, 1, 34, 56, 1, 14, 23, 181, 21, 201, 61, 37, 123, 10, 38, 71, 47, 106, 172, 95, 104,
					173, 42, 93, 159, 18, 77, 131, 4, 50, 81, 1, 17, 23, 62, 147, 199, 44, 130, 189, 28, 102, 154, 18,
					75, 115, 2, 44, 65, 1, 12, 19, 55, 153, 210, 24, 130, 194, 3, 93, 146, 1, 61, 97, 1, 31, 50, 1, 10,
					16, 49, 242, 223, 17, 148, 204, 1, 96, 142, 1, 53, 83, 1, 26, 44, 1, 11, 17, 203, 217, 212, 2, 136,
					180, 1, 78, 124, 1, 50, 83, 1, 29, 49, 1, 14, 23, 197, 13, 247, 82, 17, 222, 25, 17, 162, 126, 186,
					247, 234, 191, 243, 176, 177, 234, 104, 158, 220, 66, 128, 186, 55, 90, 137, 111, 197, 242, 46, 158,
					219, 9, 104, 171, 2, 65, 125, 1, 44, 80, 1, 17, 91, 104, 208, 245, 39, 168, 224, 3, 109, 162, 1, 79,
					124, 1, 50, 102, 1, 43, 102, 84, 220, 246, 31, 177, 231, 2, 115, 180, 1, 79, 134, 1, 55, 77, 1, 60,
					79, 43, 243, 240, 8, 180, 217, 1, 115, 166, 1, 84, 121, 1, 51, 67, 1, 16, 6 };

			Assert.assertArrayEquals(coeffProbs3, ArrayUtil.flatten5D(dc.getCoefProbs()[3]));

			Assert.assertArrayEquals(new int[] { 235, 128, 64 }, dc.getSkipProbs());
		} finally {
			NIOUtils.closeQuietly(ch);
		}
	}

	@Test
	public void testCompressedHeaderReadInterFrame() throws IOException {
		FileChannelWrapper ch = null;
		try {
			ch = NIOUtils.readableFileChannel(VP9_PATH);
			MKVDemuxer demuxer = new MKVDemuxer(ch);
			List<DemuxerTrack> videoTracks = demuxer.getVideoTracks();
			DemuxerTrack track = videoTracks.get(0);
			Packet frame = track.nextFrame();
			// next frame
			frame = track.nextFrame();
			ByteBuffer frameData = frame.getData();

			DecodingContext dc = new DecodingContext();
			dc.readUncompressedHeader(frameData.duplicate());
			int[] initialCoeffProbs0 = { 195, 22, 192, 109, 43, 138, 46, 33, 106, 53, 90, 203, 92, 84, 194, 47, 76, 177,
					40, 71, 124, 15, 52, 92, 1, 19, 32, 105, 133, 211, 81, 101, 213, 26, 89, 166, 16, 79, 132, 3, 56,
					96, 1, 28, 47, 78, 141, 222, 77, 122, 203, 15, 91, 159, 6, 67, 121, 1, 42, 77, 1, 17, 31, 104, 148,
					228, 67, 117, 204, 17, 82, 154, 6, 59, 114, 2, 39, 75, 1, 15, 29, 156, 57, 233, 119, 57, 212, 58,
					48, 163, 29, 40, 124, 12, 30, 81, 3, 12, 31, 191, 107, 226, 124, 117, 204, 25, 99, 155, 29, 148,
					210, 37, 126, 194, 8, 93, 157, 2, 68, 118, 1, 39, 69, 1, 17, 33, 41, 151, 213, 27, 123, 193, 3, 82,
					144, 1, 58, 105, 1, 32, 60, 1, 13, 26, 59, 159, 220, 23, 126, 198, 4, 88, 151, 1, 66, 114, 1, 38,
					71, 1, 18, 34, 114, 136, 232, 51, 114, 207, 11, 83, 155, 3, 56, 105, 1, 33, 65, 1, 17, 34, 149, 65,
					234, 121, 57, 215, 61, 49, 166, 28, 36, 114, 12, 25, 76, 3, 16, 42, 214, 30, 224, 153, 57, 204, 75,
					61, 153, 111, 127, 236, 139, 123, 228, 82, 112, 205, 33, 94, 171, 2, 47, 93, 1, 16, 28, 128, 163,
					234, 123, 125, 235, 29, 102, 183, 10, 69, 137, 2, 42, 81, 1, 17, 33, 152, 173, 237, 58, 130, 223,
					15, 97, 179, 4, 72, 135, 1, 45, 85, 1, 19, 38, 126, 146, 240, 66, 124, 224, 17, 88, 175, 4, 58, 122,
					1, 36, 75, 1, 18, 37, 141, 79, 241, 126, 70, 227, 66, 58, 182, 30, 44, 136, 12, 34, 96, 2, 20, 47,
					229, 99, 249, 143, 111, 235, 46, 109, 192, 82, 158, 236, 94, 146, 224, 25, 117, 191, 9, 87, 149, 3,
					56, 99, 1, 33, 57, 83, 167, 237, 68, 145, 222, 10, 103, 177, 2, 72, 131, 1, 41, 79, 1, 20, 39, 99,
					167, 239, 47, 141, 224, 10, 104, 178, 2, 73, 133, 1, 44, 85, 1, 22, 47, 127, 145, 243, 71, 129, 228,
					17, 93, 177, 3, 61, 124, 1, 41, 84, 1, 21, 52, 157, 78, 244, 140, 72, 231, 69, 58, 184, 31, 44, 137,
					14, 38, 105, 8, 23, 61 };
			ArrayUtil.fill5D(dc.getCoefProbs()[0], initialCoeffProbs0, 0);
			int[] initialCoeffProbs1 = { 121, 37, 183, 46, 38, 126, 9, 35, 72, 54, 103, 176, 67, 99, 174, 32, 96, 152,
					13, 74, 116, 5, 49, 84, 1, 29, 35, 54, 152, 209, 30, 128, 198, 23, 104, 168, 6, 81, 127, 5, 67, 122,
					1, 39, 47, 53, 174, 220, 29, 134, 207, 2, 103, 175, 1, 78, 123, 1, 40, 68, 1, 14, 24, 81, 182, 234,
					41, 147, 222, 3, 108, 168, 1, 75, 109, 1, 39, 63, 1, 14, 23, 118, 187, 238, 29, 144, 221, 6, 111,
					167, 3, 78, 118, 1, 48, 69, 1, 21, 29, 202, 105, 245, 108, 106, 216, 18, 90, 144, 33, 172, 219, 64,
					149, 206, 14, 117, 177, 5, 90, 141, 2, 61, 95, 1, 37, 57, 33, 179, 220, 11, 140, 198, 1, 89, 148, 1,
					60, 104, 1, 33, 57, 1, 12, 21, 30, 181, 221, 8, 141, 198, 1, 87, 145, 1, 58, 100, 1, 31, 55, 1, 12,
					20, 32, 186, 224, 7, 142, 198, 1, 86, 143, 1, 58, 100, 1, 31, 55, 1, 12, 22, 57, 192, 227, 20, 143,
					204, 3, 96, 154, 1, 68, 112, 1, 42, 69, 1, 19, 32, 192, 33, 200, 120, 36, 177, 42, 44, 123, 99, 123,
					210, 144, 113, 222, 82, 109, 193, 44, 98, 159, 4, 49, 95, 1, 15, 25, 96, 164, 224, 44, 136, 206, 13,
					112, 179, 6, 73, 137, 2, 51, 89, 1, 24, 42, 90, 192, 231, 37, 151, 222, 12, 95, 185, 7, 77, 131, 1,
					46, 81, 1, 18, 30, 102, 200, 240, 47, 152, 231, 5, 102, 178, 1, 67, 120, 1, 38, 69, 1, 15, 30, 74,
					206, 238, 30, 159, 224, 7, 107, 177, 2, 70, 124, 1, 42, 73, 1, 18, 34, 225, 86, 251, 144, 104, 235,
					42, 99, 181, 85, 175, 239, 112, 165, 229, 29, 136, 200, 12, 103, 162, 6, 77, 123, 2, 53, 84, 75,
					183, 239, 30, 155, 221, 3, 106, 171, 1, 74, 128, 1, 44, 76, 1, 17, 28, 73, 185, 240, 27, 159, 222,
					2, 107, 172, 1, 75, 127, 1, 42, 73, 1, 17, 29, 62, 190, 238, 21, 159, 222, 2, 107, 172, 1, 72, 122,
					1, 40, 71, 1, 18, 32, 61, 199, 240, 27, 161, 226, 4, 113, 180, 1, 76, 129, 1, 46, 80, 1, 23, 41 };
			ArrayUtil.fill5D(dc.getCoefProbs()[1], initialCoeffProbs1, 0);
			int[] initialCoeffProbs2 = { 7, 26, 152, 3, 34, 82, 1, 26, 42, 47, 76, 129, 47, 72, 131, 29, 61, 104, 11,
					60, 118, 1, 43, 77, 1, 22, 36, 36, 120, 161, 19, 105, 162, 4, 93, 127, 4, 62, 109, 1, 54, 79, 1, 20,
					34, 20, 152, 183, 14, 116, 181, 2, 87, 154, 1, 50, 112, 1, 24, 63, 1, 14, 23, 34, 176, 202, 13, 137,
					188, 3, 88, 144, 1, 79, 91, 1, 29, 56, 1, 14, 23, 40, 211, 239, 8, 158, 219, 1, 88, 160, 1, 53, 96,
					1, 30, 56, 1, 11, 20, 19, 55, 240, 19, 59, 196, 3, 52, 105, 41, 166, 207, 104, 153, 199, 31, 123,
					181, 14, 101, 152, 5, 72, 106, 1, 36, 52, 35, 176, 211, 12, 131, 190, 2, 88, 144, 1, 60, 101, 1, 36,
					60, 1, 16, 28, 28, 183, 213, 8, 134, 191, 1, 86, 142, 1, 56, 96, 1, 30, 53, 1, 12, 20, 20, 190, 215,
					4, 135, 192, 1, 84, 139, 1, 53, 91, 1, 28, 49, 1, 11, 20, 13, 196, 216, 2, 137, 192, 1, 86, 143, 1,
					57, 99, 1, 32, 56, 1, 13, 24, 185, 30, 212, 75, 56, 177, 22, 57, 118, 89, 125, 214, 118, 133, 200,
					48, 119, 174, 16, 97, 142, 2, 49, 76, 1, 17, 27, 115, 167, 220, 63, 136, 211, 10, 98, 150, 3, 65,
					108, 1, 44, 70, 1, 18, 29, 99, 188, 217, 38, 147, 195, 4, 94, 148, 1, 61, 104, 1, 38, 65, 1, 16, 27,
					66, 196, 225, 13, 155, 200, 1, 93, 140, 1, 57, 98, 1, 36, 62, 1, 15, 26, 41, 226, 231, 5, 166, 206,
					1, 97, 151, 1, 60, 104, 1, 36, 62, 1, 16, 28, 233, 29, 248, 146, 47, 220, 43, 52, 140, 100, 163,
					232, 179, 161, 222, 63, 142, 204, 37, 113, 174, 26, 89, 137, 18, 68, 97, 85, 181, 230, 32, 146, 209,
					7, 100, 164, 3, 71, 121, 1, 45, 77, 1, 18, 30, 65, 187, 230, 20, 148, 207, 2, 97, 159, 1, 68, 116,
					1, 40, 70, 1, 14, 29, 40, 194, 227, 8, 147, 204, 1, 94, 155, 1, 65, 112, 1, 39, 66, 1, 14, 26, 16,
					208, 228, 3, 151, 207, 1, 98, 160, 1, 67, 117, 1, 41, 74, 1, 17, 31 };
			ArrayUtil.fill5D(dc.getCoefProbs()[2], initialCoeffProbs2, 0);
			int[] initialCoeffProbs3 = { 17, 38, 140, 5, 33, 74, 1, 17, 32, 34, 71, 128, 35, 73, 114, 20, 59, 114, 7,
					52, 107, 2, 32, 63, 1, 13, 14, 35, 95, 138, 21, 104, 147, 9, 86, 130, 3, 59, 82, 1, 38, 77, 1, 25,
					19, 26, 114, 167, 10, 94, 154, 2, 71, 110, 1, 55, 91, 1, 36, 57, 1, 11, 17, 17, 158, 189, 6, 116,
					184, 1, 80, 140, 1, 59, 89, 1, 35, 58, 1, 11, 18, 16, 229, 232, 2, 161, 212, 1, 101, 160, 1, 65, 86,
					1, 26, 43, 1, 11, 17, 36, 41, 235, 29, 36, 193, 10, 27, 111, 85, 165, 222, 177, 162, 215, 110, 135,
					195, 57, 113, 168, 23, 83, 120, 10, 49, 61, 85, 190, 223, 36, 139, 200, 5, 90, 146, 1, 60, 103, 1,
					38, 65, 1, 18, 30, 72, 202, 223, 23, 141, 199, 2, 86, 140, 1, 56, 97, 1, 36, 61, 1, 16, 27, 55, 218,
					225, 13, 145, 200, 1, 86, 141, 1, 57, 99, 1, 35, 61, 1, 13, 22, 15, 235, 212, 1, 132, 184, 1, 84,
					139, 1, 57, 97, 1, 34, 56, 1, 14, 23, 175, 20, 203, 57, 34, 132, 10, 37, 77, 47, 106, 172, 87, 130,
					176, 42, 93, 159, 18, 77, 131, 4, 50, 81, 1, 17, 23, 62, 174, 200, 44, 134, 189, 28, 102, 154, 18,
					75, 115, 2, 44, 65, 1, 12, 19, 52, 174, 213, 24, 132, 195, 3, 93, 146, 1, 61, 97, 1, 31, 50, 1, 10,
					16, 54, 214, 224, 17, 161, 205, 1, 96, 142, 1, 53, 83, 1, 26, 44, 1, 11, 17, 30, 216, 215, 2, 136,
					181, 1, 78, 124, 1, 50, 83, 1, 29, 49, 1, 14, 23, 197, 13, 247, 82, 17, 222, 25, 17, 162, 126, 186,
					247, 234, 191, 243, 176, 177, 234, 104, 158, 220, 66, 128, 186, 55, 90, 137, 111, 197, 242, 46, 158,
					219, 9, 104, 171, 2, 65, 125, 1, 44, 80, 1, 17, 91, 104, 208, 245, 39, 168, 224, 3, 109, 162, 1, 79,
					124, 1, 50, 102, 1, 43, 102, 84, 220, 246, 31, 177, 231, 2, 115, 180, 1, 79, 134, 1, 55, 77, 1, 60,
					79, 43, 243, 240, 8, 180, 217, 1, 115, 166, 1, 84, 121, 1, 51, 67, 1, 16, 6 };
			ArrayUtil.fill5D(dc.getCoefProbs()[3], initialCoeffProbs3, 0);
			ArrayUtil.fill1D(dc.getSkipProbs(), new int[] { 235, 128, 64 }, 0);

			NIOUtils.skip(frameData, 10);

			ByteBuffer compressedHeader = NIOUtils.read(frameData, 35);
			byte[] arr = NIOUtils.toArray(compressedHeader);
			Assert.assertEquals(100, arr[0] & 0xff);
			Assert.assertEquals(164, arr[1] & 0xff);
			Assert.assertEquals(171, arr[2] & 0xff);
			dc.readCompressedHeader(compressedHeader);
			Assert.assertEquals(3, dc.getTxMode());
			Assert.assertArrayEquals(new int[] { 144, 85, 34 }, dc.getSkipProbs());
			Assert.assertArrayEquals(
					new int[] { 2, 173, 34, 7, 145, 85, 7, 166, 125, 7, 94, 66, 8, 64, 46, 17, 177, 31, 25, 29, 30 },
					ArrayUtil.flatten2D(dc.getInterModeProbs()));
			Assert.assertArrayEquals(new int[] { 235, 162, 36, 255, 34, 3, 149, 252 },
					ArrayUtil.flatten2D(dc.getInterpProbs()));

			Assert.assertArrayEquals(new int[] { 9, 102, 187, 225 }, dc.getIsInterProbs());

			Assert.assertArrayEquals(new int[] { 33, 16, 77, 74, 142, 142, 172, 170, 255, 247 },
					ArrayUtil.flatten2D(dc.getSingleRefProbs()));

			Assert.assertArrayEquals(
					new int[] { 65, 32, 18, 144, 162, 194, 41, 51, 98, 227, 68, 18, 165, 217, 196, 45, 40, 78, 173, 80,
							19, 176, 240, 193, 64, 35, 46, 221, 135, 38, 194, 248, 121, 96, 85, 29 },
					ArrayUtil.flatten2D(dc.getYModeProbs()));

			Assert.assertArrayEquals(new int[] { 252, 122, 141, 147, 63, 159, 148, 133, 118, 121, 104, 114, 174, 4, 5,
					167, 41, 83, 82, 4, 50, 53, 39, 39, 177, 58, 59, 164, 26, 63, 52, 79, 25, 17, 14, 12, 222, 34, 30,
					72, 16, 44, 58, 32, 12, 10, 7, 6 }, ArrayUtil.flatten2D(dc.getPartitionProbs()));

			int[] coeffProbs0 = { 195, 22, 192, 109, 43, 138, 46, 33, 106, 53, 90, 203, 92, 84, 194, 47, 76, 177, 40,
					71, 124, 15, 52, 92, 1, 19, 32, 105, 133, 211, 81, 101, 213, 26, 89, 166, 16, 79, 132, 3, 56, 96, 1,
					28, 47, 78, 141, 222, 77, 122, 203, 15, 91, 159, 6, 67, 121, 1, 42, 77, 1, 17, 31, 104, 148, 228,
					67, 117, 204, 17, 82, 154, 6, 59, 114, 2, 39, 75, 1, 15, 29, 156, 57, 233, 119, 57, 212, 58, 48,
					163, 29, 40, 124, 12, 30, 81, 3, 12, 31, 191, 107, 226, 124, 117, 204, 25, 99, 155, 29, 148, 210,
					37, 126, 194, 8, 93, 157, 2, 68, 118, 1, 39, 69, 1, 17, 33, 41, 151, 213, 27, 123, 193, 3, 82, 144,
					1, 58, 105, 1, 32, 60, 1, 13, 26, 59, 159, 220, 23, 126, 198, 4, 88, 151, 1, 66, 114, 1, 38, 71, 1,
					18, 34, 114, 136, 232, 51, 114, 207, 11, 83, 155, 3, 56, 105, 1, 33, 65, 1, 17, 34, 149, 65, 234,
					121, 57, 215, 61, 49, 166, 28, 36, 114, 12, 25, 76, 3, 16, 42, 214, 30, 224, 153, 57, 204, 75, 61,
					153, 111, 127, 236, 139, 123, 228, 82, 112, 205, 33, 94, 171, 2, 47, 93, 1, 16, 28, 128, 163, 234,
					123, 125, 235, 29, 102, 183, 10, 69, 137, 2, 42, 81, 1, 17, 33, 152, 173, 237, 58, 130, 223, 15, 97,
					179, 4, 72, 135, 1, 45, 85, 1, 19, 38, 126, 146, 240, 66, 124, 224, 17, 88, 175, 4, 58, 122, 1, 36,
					75, 1, 18, 37, 141, 79, 241, 126, 70, 227, 66, 58, 182, 30, 44, 136, 12, 34, 96, 2, 20, 47, 229, 99,
					249, 143, 111, 235, 46, 109, 192, 82, 158, 236, 94, 146, 224, 25, 117, 191, 9, 87, 149, 3, 56, 99,
					1, 33, 57, 83, 167, 237, 68, 145, 222, 10, 103, 177, 2, 72, 131, 1, 41, 79, 1, 20, 39, 99, 167, 239,
					47, 141, 224, 10, 104, 178, 2, 73, 133, 1, 44, 85, 1, 22, 47, 127, 145, 243, 71, 129, 228, 17, 93,
					177, 3, 61, 124, 1, 41, 84, 1, 21, 52, 157, 78, 244, 140, 72, 231, 69, 58, 184, 31, 44, 137, 14, 38,
					105, 8, 23, 61 };
			Assert.assertArrayEquals(coeffProbs0, ArrayUtil.flatten5D(dc.getCoefProbs()[0]));

			int[] coeffProbs1 = { 121, 37, 183, 46, 38, 126, 9, 35, 72, 54, 103, 176, 67, 99, 174, 32, 96, 152, 13, 74,
					116, 5, 49, 84, 1, 29, 35, 54, 152, 209, 30, 128, 198, 23, 104, 168, 6, 81, 127, 5, 67, 122, 1, 39,
					47, 53, 174, 220, 29, 134, 207, 2, 103, 175, 1, 78, 123, 1, 40, 68, 1, 14, 24, 81, 182, 234, 41,
					147, 222, 3, 108, 168, 1, 75, 109, 1, 39, 63, 1, 14, 23, 118, 187, 238, 29, 144, 221, 6, 111, 167,
					3, 78, 118, 1, 48, 69, 1, 21, 29, 1, 105, 245, 108, 106, 216, 18, 90, 144, 33, 172, 219, 64, 149,
					206, 14, 117, 177, 5, 90, 141, 2, 61, 95, 1, 37, 57, 203, 179, 220, 11, 140, 198, 1, 89, 148, 1, 60,
					104, 1, 33, 57, 1, 12, 21, 30, 181, 221, 8, 141, 198, 1, 87, 145, 1, 58, 100, 1, 31, 55, 1, 12, 20,
					32, 186, 224, 7, 142, 198, 1, 86, 143, 1, 58, 100, 1, 31, 55, 1, 12, 22, 57, 192, 227, 20, 143, 204,
					3, 96, 154, 1, 68, 112, 1, 42, 69, 1, 19, 32, 192, 33, 200, 120, 36, 177, 42, 44, 123, 99, 123, 210,
					144, 113, 222, 82, 109, 193, 44, 98, 159, 4, 49, 95, 1, 15, 25, 96, 164, 224, 44, 136, 206, 13, 112,
					179, 6, 73, 137, 2, 51, 89, 1, 24, 42, 90, 192, 231, 37, 151, 222, 12, 95, 185, 7, 77, 131, 1, 46,
					81, 1, 18, 30, 102, 200, 240, 47, 152, 231, 5, 102, 178, 1, 67, 120, 1, 38, 69, 1, 15, 30, 74, 206,
					238, 30, 159, 224, 7, 107, 177, 2, 70, 124, 1, 42, 73, 1, 18, 34, 255, 86, 251, 144, 104, 235, 42,
					99, 181, 85, 175, 239, 112, 165, 229, 29, 136, 200, 12, 103, 162, 6, 77, 123, 2, 53, 84, 75, 183,
					239, 30, 155, 221, 3, 106, 171, 1, 74, 128, 1, 44, 76, 1, 17, 28, 73, 185, 240, 27, 159, 222, 2,
					107, 172, 1, 75, 127, 1, 42, 73, 1, 17, 29, 62, 190, 238, 21, 159, 222, 2, 107, 172, 1, 72, 122, 1,
					40, 71, 1, 18, 32, 61, 199, 240, 27, 161, 226, 4, 113, 180, 1, 76, 129, 1, 46, 80, 1, 23, 41 };

			Assert.assertArrayEquals(coeffProbs1, ArrayUtil.flatten5D(dc.getCoefProbs()[1]));

			int[] coeffProbs2 = { 7, 26, 152, 3, 34, 82, 1, 26, 42, 47, 76, 129, 47, 72, 131, 29, 61, 104, 11, 60, 118,
					1, 43, 77, 1, 22, 36, 36, 120, 161, 19, 105, 162, 4, 93, 127, 4, 62, 109, 1, 54, 79, 1, 20, 34, 20,
					152, 183, 14, 116, 181, 2, 87, 154, 1, 50, 112, 1, 24, 63, 1, 14, 23, 34, 176, 202, 13, 137, 188, 3,
					88, 144, 1, 79, 91, 1, 29, 56, 1, 14, 23, 40, 211, 239, 8, 158, 219, 1, 88, 160, 1, 53, 96, 1, 30,
					56, 1, 11, 20, 19, 55, 240, 19, 59, 196, 3, 52, 105, 41, 166, 207, 104, 153, 199, 31, 123, 181, 14,
					101, 152, 5, 72, 106, 1, 36, 52, 35, 176, 211, 12, 131, 190, 2, 88, 144, 1, 60, 101, 1, 36, 60, 1,
					16, 28, 28, 183, 213, 8, 134, 191, 1, 86, 142, 1, 56, 96, 1, 30, 53, 1, 12, 20, 20, 190, 215, 4,
					135, 192, 1, 84, 139, 1, 53, 91, 1, 28, 49, 1, 11, 20, 13, 196, 216, 2, 137, 192, 1, 86, 143, 1, 57,
					99, 1, 32, 56, 1, 13, 24, 185, 30, 212, 75, 56, 177, 22, 57, 118, 89, 125, 214, 118, 133, 200, 48,
					119, 174, 16, 97, 142, 2, 49, 76, 1, 17, 27, 115, 167, 220, 63, 136, 211, 10, 98, 150, 3, 65, 108,
					1, 44, 70, 1, 18, 29, 99, 188, 217, 38, 147, 195, 4, 94, 148, 1, 61, 104, 1, 38, 65, 1, 16, 27, 66,
					196, 225, 13, 155, 200, 1, 93, 140, 1, 57, 98, 1, 36, 62, 1, 15, 26, 41, 226, 231, 5, 166, 206, 1,
					97, 151, 1, 60, 104, 1, 36, 62, 1, 16, 28, 233, 29, 248, 146, 47, 220, 43, 52, 140, 100, 163, 232,
					179, 161, 222, 63, 142, 204, 37, 113, 174, 26, 89, 137, 18, 68, 97, 85, 181, 230, 32, 146, 209, 7,
					100, 164, 3, 71, 121, 1, 45, 77, 1, 18, 30, 65, 187, 230, 20, 148, 207, 2, 97, 159, 1, 68, 116, 1,
					40, 70, 1, 14, 29, 40, 194, 227, 8, 147, 204, 1, 94, 155, 1, 65, 112, 1, 39, 66, 1, 14, 26, 16, 208,
					228, 3, 151, 207, 1, 98, 160, 1, 67, 117, 1, 41, 74, 1, 17, 31 };

			Assert.assertArrayEquals(coeffProbs2, ArrayUtil.flatten5D(dc.getCoefProbs()[2]));

			int[] coeffProbs3 = { 17, 38, 140, 5, 33, 74, 1, 17, 32, 34, 71, 128, 35, 73, 114, 20, 59, 114, 7, 52, 107,
					2, 32, 63, 1, 13, 14, 35, 95, 138, 21, 104, 147, 9, 86, 130, 3, 59, 82, 1, 38, 77, 1, 25, 19, 26,
					114, 167, 10, 94, 154, 2, 71, 110, 1, 55, 91, 1, 36, 57, 1, 11, 17, 17, 158, 189, 6, 116, 184, 1,
					80, 140, 1, 59, 89, 1, 35, 58, 1, 11, 18, 16, 229, 232, 2, 161, 212, 1, 101, 160, 1, 65, 86, 1, 26,
					43, 1, 11, 17, 36, 41, 235, 29, 36, 193, 10, 27, 111, 85, 165, 222, 177, 162, 215, 110, 135, 195,
					57, 113, 168, 23, 83, 120, 10, 49, 61, 85, 190, 223, 36, 139, 200, 5, 90, 146, 1, 60, 103, 1, 38,
					65, 1, 18, 30, 72, 202, 223, 23, 141, 199, 2, 86, 140, 1, 56, 97, 1, 36, 61, 1, 16, 27, 55, 218,
					225, 13, 145, 200, 1, 86, 141, 1, 57, 99, 1, 35, 61, 1, 13, 22, 15, 235, 212, 1, 132, 184, 1, 84,
					139, 1, 57, 97, 1, 34, 56, 1, 14, 23, 175, 20, 203, 57, 34, 132, 10, 37, 77, 47, 106, 172, 87, 130,
					176, 42, 93, 159, 18, 77, 131, 4, 50, 81, 1, 17, 23, 62, 174, 200, 44, 134, 189, 28, 102, 154, 18,
					75, 115, 2, 44, 65, 1, 12, 19, 52, 174, 213, 24, 132, 195, 3, 93, 146, 1, 61, 97, 1, 31, 50, 1, 10,
					16, 54, 214, 224, 17, 161, 205, 1, 96, 142, 1, 53, 83, 1, 26, 44, 1, 11, 17, 30, 216, 215, 2, 136,
					181, 1, 78, 124, 1, 50, 83, 1, 29, 49, 1, 14, 23, 197, 13, 247, 82, 17, 222, 25, 17, 162, 126, 186,
					247, 234, 191, 243, 176, 177, 234, 104, 158, 220, 66, 128, 186, 55, 90, 137, 111, 197, 242, 46, 158,
					219, 9, 104, 171, 2, 65, 125, 1, 44, 80, 1, 17, 91, 104, 208, 245, 39, 168, 224, 3, 109, 162, 1, 79,
					124, 1, 50, 102, 1, 43, 102, 84, 220, 246, 31, 177, 231, 2, 115, 180, 1, 79, 134, 1, 55, 77, 1, 60,
					79, 43, 243, 240, 8, 180, 217, 1, 115, 166, 1, 84, 121, 1, 51, 67, 1, 16, 6 };

			Assert.assertArrayEquals(coeffProbs3, ArrayUtil.flatten5D(dc.getCoefProbs()[3]));

			Assert.assertArrayEquals(new int[] { 1, 64, 96 }, dc.getMvJointProbs());

			Assert.assertArrayEquals(new int[] { 128, 128 }, dc.getMvSignProb());

			Assert.assertArrayEquals(new int[] { 224, 144, 192, 168, 192, 176, 192, 198, 198, 245, 143, 39, 255, 160,
					176, 176, 192, 198, 198, 208 }, ArrayUtil.flatten2D(dc.getMvClassProbs()));

			Assert.assertArrayEquals(new int[] { 216, 208 }, dc.getMvClass0BitProbs());

			Assert.assertArrayEquals(new int[] { 136, 140, 148, 160, 176, 192, 224, 234, 234, 240, 136, 140, 148, 160,
					176, 192, 224, 234, 234, 240 }, ArrayUtil.flatten2D(dc.getMvBitsProb()));

			Assert.assertArrayEquals(new int[] { 128, 128, 64, 96, 112, 64, 128, 128, 64, 96, 112, 64 },
					ArrayUtil.flatten3D(dc.getMvClass0FrProbs()));
		} finally {
			NIOUtils.closeQuietly(ch);
		}
	}

}
