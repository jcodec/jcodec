package org.jcodec.codecs.vpx.vp9;

import org.jcodec.codecs.vpx.VPXBooleanDecoder;
import org.jcodec.common.ArrayUtil;
import org.junit.Assert;
import org.junit.Test;

public class ResidualTest {
    public static final short[] INTRA_FRAME_COEFFS = { 195, 29, 14, 84, 49, 74, 8, 18, 34, 31, 64, 107, 35, 99, 84, 17,
            82, 78, 8, 66, 84, 2, 44, 76, 1, 19, 32, 40, 96, 144, 29, 84, 138, 13, 91, 121, 7, 75, 127, 3, 58, 95, 1,
            28, 47, 69, 119, 221, 42, 98, 178, 15, 91, 159, 6, 67, 121, 1, 42, 77, 1, 17, 31, 102, 148, 228, 67, 117,
            204, 17, 82, 154, 6, 59, 114, 2, 39, 75, 1, 15, 29, 156, 57, 233, 119, 57, 212, 58, 48, 163, 29, 40, 124,
            12, 30, 81, 3, 12, 31, 191, 107, 226, 124, 117, 204, 25, 99, 155, 29, 148, 210, 37, 126, 194, 8, 93, 157, 2,
            68, 118, 1, 39, 69, 1, 17, 33, 41, 151, 213, 27, 123, 193, 3, 82, 144, 1, 58, 105, 1, 32, 60, 1, 13, 26, 59,
            159, 220, 23, 126, 198, 4, 88, 151, 1, 66, 114, 1, 38, 71, 1, 18, 34, 114, 136, 232, 51, 114, 207, 11, 83,
            155, 3, 56, 105, 1, 33, 65, 1, 17, 34, 149, 65, 234, 121, 57, 215, 61, 49, 166, 28, 36, 114, 12, 25, 76, 3,
            16, 42, 214, 49, 105, 83, 63, 118, 25, 65, 88, 85, 137, 221, 104, 131, 216, 49, 111, 192, 21, 87, 155, 2,
            49, 87, 1, 16, 28, 89, 127, 230, 90, 137, 220, 29, 100, 183, 10, 70, 135, 2, 42, 81, 1, 17, 33, 108, 167,
            237, 55, 133, 222, 15, 97, 179, 4, 72, 135, 1, 45, 85, 1, 19, 38, 124, 146, 240, 66, 124, 224, 17, 88, 175,
            4, 58, 122, 1, 36, 75, 1, 18, 37, 141, 79, 241, 126, 70, 227, 66, 58, 182, 30, 44, 136, 12, 34, 96, 2, 20,
            47, 229, 99, 249, 143, 111, 235, 46, 109, 192, 82, 158, 236, 94, 146, 224, 25, 117, 191, 9, 87, 149, 3, 56,
            99, 1, 33, 57, 83, 167, 237, 68, 145, 222, 10, 103, 177, 2, 72, 131, 1, 41, 79, 1, 20, 39, 99, 167, 239, 47,
            141, 224, 10, 104, 178, 2, 73, 133, 1, 44, 85, 1, 22, 47, 127, 145, 243, 71, 129, 228, 17, 93, 177, 3, 61,
            124, 1, 41, 84, 1, 21, 52, 157, 78, 244, 140, 72, 231, 69, 58, 184, 31, 44, 137, 14, 38, 105, 8, 23, 61,
            125, 34, 187, 52, 41, 19, 6, 31, 26, 37, 109, 153, 51, 102, 147, 23, 87, 128, 8, 67, 101, 1, 41, 63, 1, 19,
            29, 31, 154, 185, 17, 127, 175, 6, 96, 145, 2, 73, 114, 1, 51, 82, 1, 28, 45, 23, 163, 105, 10, 131, 79, 2,
            93, 148, 1, 67, 55, 1, 41, 69, 1, 14, 24, 29, 176, 144, 12, 96, 152, 3, 101, 156, 1, 69, 111, 1, 39, 63, 1,
            14, 23, 57, 192, 233, 25, 131, 215, 6, 109, 167, 3, 78, 118, 1, 48, 69, 1, 21, 29, 202, 105, 245, 108, 106,
            216, 18, 90, 144, 33, 172, 219, 64, 149, 206, 14, 117, 177, 5, 90, 141, 2, 61, 95, 1, 37, 57, 33, 179, 220,
            11, 140, 198, 1, 89, 148, 1, 60, 104, 1, 33, 57, 1, 12, 21, 30, 181, 221, 8, 141, 198, 1, 87, 145, 1, 58,
            100, 1, 31, 55, 1, 12, 20, 32, 186, 224, 7, 142, 198, 1, 86, 143, 1, 58, 100, 1, 31, 55, 1, 12, 22, 57, 192,
            227, 20, 143, 204, 3, 96, 154, 1, 68, 112, 1, 42, 69, 1, 19, 32, 212, 35, 215, 113, 47, 169, 29, 48, 105,
            74, 129, 203, 106, 120, 203, 49, 107, 178, 19, 84, 144, 4, 50, 84, 1, 15, 25, 71, 172, 217, 44, 141, 209,
            15, 102, 173, 6, 76, 133, 2, 51, 89, 1, 24, 42, 64, 185, 231, 31, 148, 216, 8, 103, 175, 3, 74, 131, 1, 46,
            81, 1, 18, 30, 65, 196, 235, 25, 157, 221, 5, 105, 174, 1, 67, 120, 1, 38, 69, 1, 15, 30, 65, 204, 238, 30,
            156, 224, 7, 107, 177, 2, 70, 124, 1, 42, 73, 1, 18, 34, 225, 86, 251, 144, 104, 235, 42, 99, 181, 85, 175,
            239, 112, 165, 229, 29, 136, 200, 12, 103, 162, 6, 77, 123, 2, 53, 84, 75, 183, 239, 30, 155, 221, 3, 106,
            171, 1, 74, 128, 1, 44, 76, 1, 17, 28, 73, 185, 240, 27, 159, 222, 2, 107, 172, 1, 75, 127, 1, 42, 73, 1,
            17, 29, 62, 190, 238, 21, 159, 222, 2, 107, 172, 1, 72, 122, 1, 40, 71, 1, 18, 32, 61, 199, 240, 27, 161,
            226, 4, 113, 180, 1, 76, 129, 1, 46, 80, 1, 23, 41, 7, 27, 153, 5, 30, 95, 1, 16, 30, 50, 75, 127, 57, 75,
            124, 27, 67, 108, 10, 54, 86, 1, 33, 52, 1, 12, 18, 43, 125, 151, 26, 108, 148, 7, 83, 122, 2, 59, 89, 1,
            38, 60, 1, 17, 27, 23, 144, 163, 13, 112, 154, 2, 75, 117, 1, 50, 81, 1, 31, 51, 1, 14, 23, 18, 162, 185, 6,
            123, 171, 1, 78, 125, 1, 51, 86, 1, 31, 54, 1, 14, 23, 15, 199, 227, 3, 150, 204, 1, 91, 146, 1, 55, 95, 1,
            30, 53, 1, 11, 20, 19, 55, 240, 19, 59, 196, 3, 52, 105, 41, 166, 207, 104, 153, 199, 31, 123, 181, 14, 101,
            152, 5, 72, 106, 1, 36, 52, 35, 176, 211, 12, 131, 190, 2, 88, 144, 1, 60, 101, 1, 36, 60, 1, 16, 28, 28,
            183, 213, 8, 134, 191, 1, 86, 142, 1, 56, 96, 1, 30, 53, 1, 12, 20, 20, 190, 215, 4, 135, 192, 1, 84, 139,
            1, 53, 91, 1, 28, 49, 1, 11, 20, 13, 196, 216, 2, 137, 192, 1, 86, 143, 1, 57, 99, 1, 32, 56, 1, 13, 24,
            211, 29, 217, 96, 47, 156, 22, 43, 87, 78, 120, 193, 111, 116, 186, 46, 102, 164, 15, 80, 128, 2, 49, 76, 1,
            18, 28, 71, 161, 203, 42, 132, 192, 10, 98, 150, 3, 69, 109, 1, 44, 70, 1, 18, 29, 57, 186, 211, 30, 140,
            196, 4, 93, 146, 1, 62, 102, 1, 38, 65, 1, 16, 27, 47, 199, 217, 14, 145, 196, 1, 88, 142, 1, 57, 98, 1, 36,
            62, 1, 15, 26, 26, 219, 229, 5, 155, 207, 1, 94, 151, 1, 60, 104, 1, 36, 62, 1, 16, 28, 233, 29, 248, 146,
            47, 220, 43, 52, 140, 100, 163, 232, 179, 161, 222, 63, 142, 204, 37, 113, 174, 26, 89, 137, 18, 68, 97, 85,
            181, 230, 32, 146, 209, 7, 100, 164, 3, 71, 121, 1, 45, 77, 1, 18, 30, 65, 187, 230, 20, 148, 207, 2, 97,
            159, 1, 68, 116, 1, 40, 70, 1, 14, 29, 40, 194, 227, 8, 147, 204, 1, 94, 155, 1, 65, 112, 1, 39, 66, 1, 14,
            26, 16, 208, 228, 3, 151, 207, 1, 98, 160, 1, 67, 117, 1, 41, 74, 1, 17, 31, 17, 38, 140, 7, 34, 80, 1, 17,
            29, 37, 75, 128, 41, 76, 128, 26, 66, 116, 12, 52, 94, 2, 32, 55, 1, 10, 16, 50, 127, 154, 37, 109, 152, 16,
            82, 121, 5, 59, 85, 1, 35, 54, 1, 13, 20, 40, 142, 167, 17, 110, 157, 2, 71, 112, 1, 44, 72, 1, 27, 45, 1,
            11, 17, 30, 175, 188, 9, 124, 169, 1, 74, 116, 1, 48, 78, 1, 30, 49, 1, 11, 18, 10, 222, 223, 2, 150, 194,
            1, 83, 128, 1, 48, 79, 1, 27, 45, 1, 11, 17, 36, 41, 235, 29, 36, 193, 10, 27, 111, 85, 165, 222, 177, 162,
            215, 110, 135, 195, 57, 113, 168, 23, 83, 120, 10, 49, 61, 85, 190, 223, 36, 139, 200, 5, 90, 146, 1, 60,
            103, 1, 38, 65, 1, 18, 30, 72, 202, 223, 23, 141, 199, 2, 86, 140, 1, 56, 97, 1, 36, 61, 1, 16, 27, 55, 218,
            225, 13, 145, 200, 1, 86, 141, 1, 57, 99, 1, 35, 61, 1, 13, 22, 15, 235, 212, 1, 132, 184, 1, 84, 139, 1,
            57, 97, 1, 34, 56, 1, 14, 23, 181, 21, 201, 61, 37, 123, 10, 38, 71, 47, 106, 172, 95, 104, 173, 42, 93,
            159, 18, 77, 131, 4, 50, 81, 1, 17, 23, 62, 147, 199, 44, 130, 189, 28, 102, 154, 18, 75, 115, 2, 44, 65, 1,
            12, 19, 55, 153, 210, 24, 130, 194, 3, 93, 146, 1, 61, 97, 1, 31, 50, 1, 10, 16, 49, 186, 223, 17, 148, 204,
            1, 96, 142, 1, 53, 83, 1, 26, 44, 1, 11, 17, 13, 217, 212, 2, 136, 180, 1, 78, 124, 1, 50, 83, 1, 29, 49, 1,
            14, 23, 197, 13, 247, 82, 17, 222, 25, 17, 162, 126, 186, 247, 234, 191, 243, 176, 177, 234, 104, 158, 220,
            66, 128, 186, 55, 90, 137, 111, 197, 242, 46, 158, 219, 9, 104, 171, 2, 65, 125, 1, 44, 80, 1, 17, 91, 104,
            208, 245, 39, 168, 224, 3, 109, 162, 1, 79, 124, 1, 50, 102, 1, 43, 102, 84, 220, 246, 31, 177, 231, 2, 115,
            180, 1, 79, 134, 1, 55, 77, 1, 60, 79, 43, 243, 240, 8, 180, 217, 1, 115, 166, 1, 84, 121, 1, 51, 67, 1, 16,
            6 };
    public static final short[] COEFF_PROBS_1 = { 195, 29, 14, 84, 49, 74, 8, 25, 36, 31, 107, 120, 35, 56, 71, 17, 82,
            104, 8, 66, 71, 2, 44, 59, 1, 19, 32, 40, 96, 152, 29, 114, 151, 13, 91, 157, 7, 75, 97, 3, 41, 95, 1, 28,
            47, 69, 93, 198, 42, 122, 201, 15, 91, 159, 6, 67, 121, 1, 42, 77, 1, 17, 31, 102, 99, 228, 67, 117, 204,
            17, 82, 154, 6, 59, 114, 2, 39, 75, 1, 15, 29, 156, 57, 233, 119, 57, 212, 58, 48, 163, 29, 40, 124, 12, 30,
            81, 3, 12, 31, 191, 107, 226, 124, 117, 204, 25, 99, 155, 29, 148, 210, 37, 126, 194, 8, 93, 157, 2, 68,
            118, 1, 39, 69, 1, 17, 33, 41, 151, 213, 27, 123, 193, 3, 82, 144, 1, 58, 105, 1, 32, 60, 1, 13, 26, 59,
            159, 220, 23, 126, 198, 4, 88, 151, 1, 66, 114, 1, 38, 71, 1, 18, 34, 114, 136, 232, 51, 114, 207, 11, 83,
            155, 3, 56, 105, 1, 33, 65, 1, 17, 34, 149, 65, 234, 121, 57, 215, 61, 49, 166, 28, 36, 114, 12, 25, 76, 3,
            16, 42, 105, 49, 144, 83, 63, 188, 42, 65, 88, 85, 75, 183, 104, 131, 216, 49, 111, 192, 21, 87, 155, 2, 49,
            87, 1, 16, 28, 89, 163, 230, 90, 137, 220, 29, 100, 183, 10, 70, 135, 2, 42, 81, 1, 17, 33, 108, 167, 237,
            55, 133, 222, 15, 97, 179, 4, 72, 135, 1, 45, 85, 1, 19, 38, 124, 146, 240, 66, 124, 224, 17, 88, 175, 4,
            58, 122, 1, 36, 75, 1, 18, 37, 141, 79, 241, 126, 70, 227, 66, 58, 182, 30, 44, 136, 12, 34, 96, 2, 20, 47,
            229, 99, 249, 143, 111, 235, 46, 109, 192, 82, 158, 236, 94, 146, 224, 25, 117, 191, 9, 87, 149, 3, 56, 99,
            1, 33, 57, 83, 167, 237, 68, 145, 222, 10, 103, 177, 2, 72, 131, 1, 41, 79, 1, 20, 39, 99, 167, 239, 47,
            141, 224, 10, 104, 178, 2, 73, 133, 1, 44, 85, 1, 22, 47, 127, 145, 243, 71, 129, 228, 17, 93, 177, 3, 61,
            124, 1, 41, 84, 1, 21, 52, 157, 78, 244, 140, 72, 231, 69, 58, 184, 31, 44, 137, 14, 38, 105, 8, 23, 61,
            125, 34, 187, 52, 41, 32, 6, 31, 13, 37, 109, 153, 51, 102, 46, 23, 87, 128, 8, 67, 101, 1, 41, 63, 1, 19,
            29, 31, 154, 185, 17, 127, 175, 6, 96, 145, 2, 73, 114, 1, 51, 82, 1, 28, 45, 23, 163, 79, 10, 56, 92, 2,
            93, 73, 1, 67, 68, 1, 41, 69, 1, 14, 24, 29, 92, 118, 12, 83, 131, 3, 101, 156, 1, 69, 111, 1, 39, 63, 1,
            14, 23, 57, 156, 233, 25, 131, 215, 6, 109, 167, 3, 78, 118, 1, 48, 69, 1, 21, 29, 202, 105, 245, 108, 106,
            216, 18, 90, 144, 33, 172, 219, 64, 149, 206, 14, 117, 177, 5, 90, 141, 2, 61, 95, 1, 37, 57, 33, 179, 220,
            11, 140, 198, 1, 89, 148, 1, 60, 104, 1, 33, 57, 1, 12, 21, 30, 181, 221, 8, 141, 198, 1, 87, 145, 1, 58,
            100, 1, 31, 55, 1, 12, 20, 32, 186, 224, 7, 142, 198, 1, 86, 143, 1, 58, 100, 1, 31, 55, 1, 12, 22, 57, 192,
            227, 20, 143, 204, 3, 96, 154, 1, 68, 112, 1, 42, 69, 1, 19, 32, 212, 35, 215, 113, 47, 169, 29, 48, 105,
            74, 129, 203, 11, 120, 203, 49, 107, 178, 19, 84, 144, 4, 50, 84, 1, 15, 25, 71, 172, 217, 44, 141, 209, 15,
            102, 173, 6, 76, 133, 2, 51, 89, 1, 24, 42, 64, 185, 231, 31, 148, 216, 8, 103, 175, 3, 74, 131, 1, 46, 81,
            1, 18, 30, 65, 196, 235, 25, 157, 221, 5, 105, 174, 1, 67, 120, 1, 38, 69, 1, 15, 30, 65, 204, 238, 30, 156,
            224, 7, 107, 177, 2, 70, 124, 1, 42, 73, 1, 18, 34, 225, 86, 251, 144, 104, 235, 42, 99, 181, 85, 175, 239,
            112, 165, 229, 29, 136, 200, 12, 103, 162, 6, 77, 123, 2, 53, 84, 75, 183, 239, 30, 155, 221, 3, 106, 171,
            1, 74, 128, 1, 44, 76, 1, 17, 28, 73, 185, 240, 27, 159, 222, 2, 107, 172, 1, 75, 127, 1, 42, 73, 1, 17, 29,
            62, 190, 238, 21, 159, 222, 2, 107, 172, 1, 72, 122, 1, 40, 71, 1, 18, 32, 61, 199, 240, 27, 161, 226, 4,
            113, 180, 1, 76, 129, 1, 46, 80, 1, 23, 41, 7, 27, 153, 5, 30, 95, 1, 16, 30, 50, 75, 127, 57, 75, 124, 27,
            67, 39, 10, 54, 86, 1, 33, 52, 1, 12, 18, 43, 125, 151, 26, 108, 148, 7, 83, 122, 2, 59, 89, 1, 38, 60, 1,
            17, 27, 23, 144, 163, 13, 112, 66, 2, 75, 117, 1, 50, 81, 1, 31, 51, 1, 14, 23, 18, 162, 66, 6, 123, 66, 1,
            78, 56, 1, 51, 86, 1, 31, 54, 1, 14, 23, 15, 176, 183, 3, 118, 158, 1, 91, 123, 1, 55, 95, 1, 30, 53, 1, 11,
            20, 19, 55, 240, 19, 59, 196, 3, 52, 105, 41, 166, 207, 104, 153, 199, 31, 123, 181, 14, 101, 152, 5, 72,
            106, 1, 36, 52, 35, 176, 211, 12, 131, 190, 2, 88, 144, 1, 60, 101, 1, 36, 60, 1, 16, 28, 28, 183, 213, 8,
            134, 191, 1, 86, 142, 1, 56, 96, 1, 30, 53, 1, 12, 20, 20, 190, 215, 4, 135, 192, 1, 84, 139, 1, 53, 91, 1,
            28, 49, 1, 11, 20, 13, 196, 216, 2, 137, 192, 1, 86, 143, 1, 57, 99, 1, 32, 56, 1, 13, 24, 211, 29, 217, 96,
            47, 156, 22, 43, 87, 78, 120, 193, 111, 116, 186, 46, 102, 164, 15, 80, 128, 2, 49, 76, 1, 18, 28, 71, 161,
            203, 42, 132, 192, 10, 98, 150, 3, 69, 109, 1, 44, 70, 1, 18, 29, 57, 186, 211, 30, 140, 196, 4, 93, 146, 1,
            62, 102, 1, 38, 65, 1, 16, 27, 47, 199, 217, 14, 145, 196, 1, 88, 142, 1, 57, 98, 1, 36, 62, 1, 15, 26, 26,
            219, 229, 5, 155, 207, 1, 94, 151, 1, 60, 104, 1, 36, 62, 1, 16, 28, 233, 29, 248, 146, 47, 220, 43, 52,
            140, 100, 163, 232, 179, 161, 222, 63, 142, 204, 37, 113, 174, 26, 89, 137, 18, 68, 97, 85, 181, 230, 32,
            146, 209, 7, 100, 164, 3, 71, 121, 1, 45, 77, 1, 18, 30, 65, 187, 230, 20, 148, 207, 2, 97, 159, 1, 68, 116,
            1, 40, 70, 1, 14, 29, 40, 194, 227, 8, 147, 204, 1, 94, 155, 1, 65, 112, 1, 39, 66, 1, 14, 26, 16, 208, 228,
            3, 151, 207, 1, 98, 160, 1, 67, 117, 1, 41, 74, 1, 17, 31, 17, 38, 140, 7, 34, 80, 1, 17, 29, 37, 75, 128,
            41, 76, 128, 26, 66, 116, 12, 52, 94, 2, 32, 55, 1, 10, 16, 50, 127, 154, 37, 109, 152, 16, 82, 121, 5, 59,
            85, 1, 35, 54, 1, 13, 20, 40, 142, 167, 17, 110, 157, 2, 71, 112, 1, 44, 72, 1, 27, 45, 1, 11, 17, 30, 175,
            188, 9, 124, 169, 1, 74, 116, 1, 48, 78, 1, 30, 49, 1, 11, 18, 10, 222, 223, 2, 150, 194, 1, 83, 128, 1, 48,
            79, 1, 27, 45, 1, 11, 17, 36, 41, 235, 29, 36, 193, 10, 27, 111, 85, 165, 222, 177, 162, 215, 110, 135, 195,
            57, 113, 168, 23, 83, 120, 10, 49, 61, 85, 190, 223, 36, 139, 200, 5, 90, 146, 1, 60, 103, 1, 38, 65, 1, 18,
            30, 72, 202, 223, 23, 141, 199, 2, 86, 140, 1, 56, 97, 1, 36, 61, 1, 16, 27, 55, 218, 225, 13, 145, 200, 1,
            86, 141, 1, 57, 99, 1, 35, 61, 1, 13, 22, 15, 235, 212, 1, 132, 184, 1, 84, 139, 1, 57, 97, 1, 34, 56, 1,
            14, 23, 181, 21, 201, 61, 37, 123, 10, 38, 71, 47, 106, 172, 95, 104, 173, 42, 93, 159, 18, 77, 131, 4, 50,
            81, 1, 17, 23, 62, 147, 199, 44, 130, 189, 28, 102, 154, 18, 75, 115, 2, 44, 65, 1, 12, 19, 55, 153, 210,
            24, 130, 194, 3, 93, 146, 1, 61, 97, 1, 31, 50, 1, 10, 16, 49, 186, 223, 17, 148, 204, 1, 96, 142, 1, 53,
            83, 1, 26, 44, 1, 11, 17, 13, 217, 212, 2, 136, 180, 1, 78, 124, 1, 50, 83, 1, 29, 49, 1, 14, 23, 197, 13,
            247, 82, 17, 222, 25, 17, 162, 126, 186, 247, 234, 191, 243, 176, 177, 234, 104, 158, 220, 66, 128, 186, 55,
            90, 137, 111, 197, 242, 46, 158, 219, 9, 104, 171, 2, 65, 125, 1, 44, 80, 1, 17, 91, 104, 208, 245, 39, 168,
            224, 3, 109, 162, 1, 79, 124, 1, 50, 102, 1, 43, 102, 84, 220, 246, 31, 177, 231, 2, 115, 180, 1, 79, 134,
            1, 55, 77, 1, 60, 79, 43, 243, 240, 8, 180, 217, 1, 115, 166, 1, 84, 121, 1, 51, 67, 1, 16, 6, };

    @Test
    public void testResidualIntraBlk004x4() {
        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(
                new int[] { 195, 29, 14, 39, 70, 177, 189, 180, 157, 141, 134, 130, 128, 1, 19, 32, 82, 131, 109, 165,
                        145, 128, 1, 19, 32, 82, 98, 128, 7, 75, 127, 128, 3, 58, 95, 183, 127, 158, 128, 13, 91, 67,
                        91, 159, 128, 69 },
                new int[] { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                        0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 });
        DecodingContext c = new DecodingContext();
        c.aboveNonzeroContext = new int[][] { { 0 } };
        c.leftNonzeroContext = new int[][] { { 0 } };
        c.tileHeight = 36;
        c.tileWidth = 64;
        c.frameHeight = 36;
        c.frameWidth = 64;
        c.subsamplingX = 1;
        c.subsamplingY = 1;
        c.bitDepth = 8;
        ArrayUtil.fill6D(c.coefProbs, INTRA_FRAME_COEFFS, 0);

        int plane = 0;
        int startX = 0;
        int startY = 0;
        int txSz = 0;
        int intraMode = 0;
        boolean isInter = false;

        int[] tokens = new Residual().readOneTU(plane, startX, startY, txSz, isInter, intraMode, decoder, c);
        int[] expected = { -37, -2, 0, 0, 9, 1, 0, 0, -4, 1, 0, 0, 0, 0, 0, 0 };

        Assert.assertArrayEquals(expected, tokens);
    }

    @Test
    public void testResidualIntraBlk0416x16() {
        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(new int[] { 5, 30, 95, 183, 127, 158, 128, 10, 54, 86,
                172, 216, 254, 221, 176, 155, 140, 135, 128, 10, 54, 86, 172, 216, 254, 221, 173, 148, 140, 128, 1, 17,
                27, 71, 117, 106, 165, 145, 128, 1, 17, 27, 71, 117, 224, 225, 180, 157, 141, 134, 130, 128, 1, 17, 27,
                71, 117, 224, 155, 173, 148, 140, 128, 1, 31, 51, 120, 173, 123, 159, 128, 1, 14, 23, 62, 105, 214, 146,
                176, 155, 140, 135, 128, 1, 14, 23, 62, 105, 214, 146, 173, 148, 140, 128, 1, 14, 23, 62, 94, 135, 128,
                1, 31, 54, 125, 107, 144, 128, 1, 14, 23, 62, 94, 135, 128, 1, 14, 23, 62, 105, 103, 165, 145, 128, 1,
                31, 54, 125, 107, 128, 1, 31, 54, 125, 107, 144, 128, 1, 51, 86, 172, 122, 128, 1, 31, 54, 125, 178,
                125, 159, 128, 1, 51, 86, 172, 122, 128, 1, 51, 86, 172, 122, 155, 128, 1, 31, 54, 125, 178, 125, 159,
                128, 1, 78, 125, 210, 144, 169, 128, 1, 55, 95, 183, 127, 128, 1, 91, 146, 128, 1, 30, 53, 123, 177,
                125, 165, 145, 128, 1, 91, 146, 128, 1, 55, 95, 183, 127, 158, 128, 1, 55, 95, 183, 127, 158, 128, 1,
                91, 146, 224, 155, 128, 1, 30, 53, 123, 177, 125, 159, 128, 3, 150, 204, 248, 194, 128, 1, 91, 30, 53,
                123, 177, 125, 159, 128, 1, 55, 95, 128, 1, 91, 146, 128, 1, 30, 53, 123, 177, 125, 165, 145, 128, 1,
                91, 150, 204, 128, 1, 30, 53, 123, 107, 128, 1, 91, 55, 95, 128, 3, 150, 204, 128, 1, 55, 95, 183, 127,
                158, 128, 3, 150, 204, 248, 194, 205, 128, 1, 55, 150, 204, 128, 15, 199, 150, 204, 128, 1, 91, 146,
                224, 155, 128, 1, 91, 146, 224, 155, 178, 128, 1, 55, 95, 128, 15, 199, 91, 146, 224, 155, 128, 3, 150,
                204, 248, 194, 128, 3, 150, 204, 128, 3, 150, 150, 204, 128, 15, 199, 150, 91, 91, 146, 224, 155, 178,
                128, 1, 55, 95, 183, 127, 128, 1, 91, 146, 128, 15, 199, 150, 204, 128, 3, 150, 150, 204, 248, 194, 128,
                3, 150, 199, 91, 146, 224, 155, 128, 1, 55, 199, 199, 150, 91, 150, 204, 248, 194, 205, 128, 15, 199,
                150, 204, 128, 3, 150, 204, 128, 15, 199, 199, 227, 128, 3, 150, 204, 128, 15, 199, 199, 227, 128, 1,
                55, 199, 150, 150, 91, 146, 224, 155, 128, 15, 199, 199, 150, 150, 199, 150, 204, 128, 3, 150, 204, 128,
                15, 199, 227, 128, 3, 150, 150, 199, 199, 227, 128, 3, 150, 199, 150, 204, 128, 15, 199, 199, 150, 204,
                128, 15, 199, 227, 128, 3, 150, 150, 204, 128, 3, 150, 199, 199, 150, 199, 199, 199, 150, 150, 150, 199,
                150, 199, 199, 150, 199, 150, 199, 199, 199, 199, 227, 253, 213, 128, 15, 199, 199, 199, 199, 199, 227,
                128, 15, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 150, 199, 227, 253, 213, 128, 1, 91, 146,
                224, 155, 128, 15, 199, 199, 150, 199, 199, 199, 199, 199, 199, 150, 199, 150, 199, 199, 199, 150, 199,
                199, 199, 150, 204, 248, 194, 128, 15 },
                new int[] { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
                        1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,
                        1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,
                        1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1,
                        0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1,
                        1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1,
                        1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1,
                        1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
                        1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,
                        0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,
                        1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1,
                        0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0,
                        0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,
                        1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1,
                        1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 });
        DecodingContext c = new DecodingContext();
        c.aboveNonzeroContext = new int[][] { { 1, 1, 1, 1 } };
        c.leftNonzeroContext = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0 } };

        c.tileHeight = 36;
        c.tileWidth = 64;
        c.frameHeight = 36;
        c.frameWidth = 64;
        c.subsamplingX = 1;
        c.subsamplingY = 1;
        c.bitDepth = 8;
        ArrayUtil.fill6D(c.coefProbs, INTRA_FRAME_COEFFS, 0);

        int plane = 0;
        int startX = 0;
        int startY = 4;
        int txSz = 2;
        int intraMode = 0;
        boolean isInter = false;

        int[] tokens = new Residual().readOneTU(plane, startX, startY, txSz, isInter, intraMode, decoder, c);
        int[] expected = { -4, 11, -13, -3, -2, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 26, -35, -17, -2, -3, 0, 1, 0, 0,
                1, 0, 0, 0, 0, 0, 0, -8, -22, -3, 4, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -7, 5, 10, 5, 1, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, -4, -3, 5, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, 3, 7, 0, -2, -2, -1, 0,
                -1, 0, 0, 0, 0, 0, 0, -1, -2, 1, 3, -4, -2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, -3, 0, 0, -1, -1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -1, -2, 1, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, -3, 0, 1, 0, 0, 2, 2,
                0, 0, 0, 0, 0, 0, 0, 0, 1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        Assert.assertArrayEquals(expected, tokens);
    }

    @Test
    public void testResidualIntraBlk928x8() {
        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(
                new int[] { 6, 31, 13, 37, 66, 171, 184, 254, 254, 254, 252, 249, 243, 230, 196, 177, 153, 140, 133,
                        130, 129, 128, 1, 19, 29, 76, 123, 227, 159, 176, 155, 140, 135, 128, 1, 19, 29, 76, 123, 227,
                        228, 180, 157, 141, 134, 130, 128, 1, 28, 45, 109, 162, 244, 185, 173, 148, 140, 128, 1, 28, 45,
                        109, 104, 141, 128, 1, 28, 45, 109, 162, 119, 165, 145, 128, 1, 67, 68, 147, 114, 149, 128, 1,
                        41, 69, 128, 1, 14, 24, 64, 94, 135, 128, 1, 67, 68, 147, 198, 252, 209, 173, 148, 140, 128, 12,
                        83, 131, 215, 240, 175, 165, 145, 128, 1, 69, 111, 199, 136, 164, 128, 1, 39, 63, 140, 192, 251,
                        205, 173, 148, 140, 128, 1, 69, 111, 199, 136, 128, 1, 14, 23, 62, 105, 103, 165, 145, 128, 1,
                        69, 111, 128, 3, 101, 156, 230, 162, 182, 128, 1, 14, 23, 62, 94, 128, 12, 83, 131, 128, 1, 39,
                        63, 140, 112, 147, 128, 12, 83, 78, 118, 205, 234, 167, 165, 145, 128, 25, 131, 215, 128, 6,
                        109, 167, 236, 248, 194, 165, 145, 128, 57, 156, 48, 69, 149, 199, 136, 165, 145, 128, 25, 131,
                        156, 233, 253, 218, 128, 57, 156, 48, 69, 149, 115, 128, 1, 48, 69, 128, 57, 156, 131, 109, 156,
                        233, 128, 57, 156, 233, 128, 25, 131, 215, 250, 203, 212, 128, 57, 156, 233, 128, 25, 131, 131,
                        156, 156, 233, 128, 25, 131, 131, 215, 128, 57, 156, 156, 233, 128, 57 },
                new int[] { 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0,
                        0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,
                        0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1,
                        1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1,
                        0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,
                        0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
                        0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,
                        0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
                        1, 0, 1, 1, 0, 1, 0, 1, 0 });
        DecodingContext c = new DecodingContext();
        c.aboveNonzeroContext = new int[][] { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 } };
        c.leftNonzeroContext = new int[][] { { 0, 0, 0, 1 } };

        c.tileHeight = 36;
        c.tileWidth = 64;
        c.frameHeight = 36;
        c.frameWidth = 64;
        c.subsamplingX = 1;
        c.subsamplingY = 1;
        c.bitDepth = 8;
        ArrayUtil.fill6D(c.coefProbs, COEFF_PROBS_1, 0);

        int plane = 0;
        int startX = 9;
        int startY = 2;
        int txSz = 1;
        int intraMode = 2;
        boolean isInter = false;

        int[] tokens = new Residual().readOneTU(plane, startX, startY, txSz, isInter, intraMode, decoder, c);
        int[] expected = { -73, 11, -3, 1, -1, 0, 0, 0, 20, 7, 3, 1, 0, 1, 0, 0, -56, 1, 2, 0, 0, 0, 0, 0, -3, 9, 4, 0,
                0, 1, 0, 0, -4, -15, 7, -2, 1, -1, 0, 0, -12, 2, 7, 0, 0, 0, 0, 0, 9, -9, 1, 1, -1, 0, 0, 0, -3, -2, 3,
                0, 0, 0, 0, 0 };

        Assert.assertArrayEquals(expected, tokens);
    }

    private static class ReadOneTUArgs {
        int plane;
        int blkCol;
        int blkRow;
        int txSz;
        boolean isInter;
        int intraMode;
        
        public ReadOneTUArgs(int plane, int blkCol, int blkRow, int txSz, boolean isInter, int intraMode) {
            this.plane = plane;
            this.blkCol = blkCol;
            this.blkRow = blkRow;
            this.txSz = txSz;
            this.isInter = isInter;
            this.intraMode = intraMode;
        }
    }
    
    private static class MockResidual extends Residual {
        private ReadOneTUArgs[] expected;
        private int n;

        public MockResidual(ReadOneTUArgs[] expected) {
            this.expected = expected;
        }

        @Override
        public int[] readOneTU(int plane, int blkCol, int blkRow, int txSz, boolean isInter, int intraMode,
                VPXBooleanDecoder decoder, DecodingContext c) {
            System.out.println(
                    String.format("READ TU: plane=%d, blkCol=%d, blkRow=%d, txSz=%d, isInter=%d, intraMode=%d",
                            plane, blkCol, blkRow, txSz, isInter ? 1 : 0, intraMode));
            Assert.assertTrue(n < expected.length);
            Assert.assertEquals(expected[n].plane, plane);
            Assert.assertEquals(expected[n].blkCol, blkCol);
            Assert.assertEquals(expected[n].blkRow, blkRow);
            Assert.assertEquals(expected[n].txSz, txSz);
            Assert.assertEquals(expected[n].isInter, isInter);
            Assert.assertEquals(expected[n].intraMode, intraMode);
            
            ++n;
            return null;
        }   
    }
    
    @Test
    public void testReadResidualSub4x4() {
        DecodingContext c = new DecodingContext();
        c.tileHeight = 36;
        c.tileWidth = 64;
        c.frameHeight = 36;
        c.frameWidth = 64;
        c.subsamplingX = 1;
        c.subsamplingY = 1;
        c.bitDepth = 8;
        int uvMode = 6;
        int subModes = ModeInfo.vect4(2, 4, 1, 5);
        ModeInfo modeInfo = new ModeInfo(0, false, 0, 5, subModes, uvMode);
        ReadOneTUArgs[] expected = {
          new ReadOneTUArgs(0, 2, 4, 0, false, 2),
          new ReadOneTUArgs(0, 3, 4, 0, false, 4),
          new ReadOneTUArgs(0, 2, 5, 0, false, 1),
          new ReadOneTUArgs(0, 3, 5, 0, false, 5),
          new ReadOneTUArgs(1, 1, 2, 0, false, 6),
          new ReadOneTUArgs(1, 1, 2, 0, false, 6)
        };
        new MockResidual(expected).read(1, 2, 0, null, c, modeInfo);
    }
    
    @Test
    public void testReadResidualBottomRightBorder() {
        DecodingContext c = new DecodingContext();
        c.tileHeight = 36;
        c.tileWidth = 64;
        c.frameHeight = 36;
        c.frameWidth = 64;
        c.subsamplingX = 1;
        c.subsamplingY = 1;
        c.bitDepth = 8;
        
        int miCol = 20, miColUv = miCol / 2;
        int miRow = 12, miRowUv = miRow / 2;
        int blType = 8;
        int txSize = 1;
        ModeInfo modeInfo = new InterModeInfo(0, false, txSize, 5, 0, 0);
        ReadOneTUArgs[] expected = {
          new ReadOneTUArgs(0, miCol + 0, miRow + 0, 1, true, 0),
          new ReadOneTUArgs(0, miCol + 2, miRow + 0, 1, true, 0),
          new ReadOneTUArgs(0, miCol + 4, miRow + 0, 1, true, 0),
          new ReadOneTUArgs(1, miColUv + 0, miRowUv + 0, 1, true, 0),
          new ReadOneTUArgs(1, miColUv + 2, miRowUv + 0, 1, true, 0),
          new ReadOneTUArgs(1, miColUv + 0, miRowUv + 0, 1, true, 6),
          new ReadOneTUArgs(1, miColUv + 2, miRowUv + 0, 1, true, 6)
        };
        
        new MockResidual(expected).read(miCol, miRow, blType, null, c, modeInfo);
    }
}